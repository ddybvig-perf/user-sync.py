# This is a sample configuration file for the umapi connector type.
#
# umapi (user management api) is a network protocol served by Adobe that
# provides management of users in Adobe-hosted enterprise organizations.
#
# This sample file contains all of the settable options for this protocol.
# All of the settings here can be changed.  It is recommended
# that you make a copy of this file and edit that to match your configuration.
# While you are at it, you will likely want to remove a lot of this  commentary,
# in order to enhance the readability of your file.

# (optional) UMAPI server settings (defaults as shown)
# The host and endpoint settings specify the Adobe endpoints which
# host the UMAPI services and those which provide authorization.
# The timeout and retries settings control how much delay (in seconds)
# can be tolerated in server responses, and also how many times a request
# that fails due to server timeout or server throttling will be retried.
# You will *never* need to alter these settings unless you are provided
# alternate values by Adobe as part of a support engagement.  It is
# highly recommended that you leave these values commented out
# so that the default values are guaranteed to be used.

# (optional) ssl_verify
# Allows you to disable the SSL verification used by the requests module.  This can
# come in handy for troubleshooting or working around network / proxy related issues when
# the following error is encountered:

#  'UMAPI connection to org id failed: [SSL: CERTIFICATE_VERIFY_FAILED]'

# It is recommended to leave this set to default (True), since it leaves UST potentially
# vulnerable to middle man attacks and set to False only if absolutely needed.
server:
  #host: usermanagement.adobe.io
  #endpoint: /v2/usermanagement
  #ims_host: ims-na1.adobelogin.com
  #ims_endpoint_jwt: /ims/exchange/jwt
  #timeout: 120
  #retries: 3
  #ssl_verify: True

# (required) enterprise organization settings
# You must specify all five of these settings.  Consult the
# Adobe UMAPI documentation and the Adobe I/O Console to determine
# the correct settings for your enterprise organization.
# [NOTE: the priv_key_path setting can be an absolute or relative pathname;
# if relative, it is interpreted relative to this configuration file.]

# (optional) You can store credentials in the operating system credential store
# (Windows Credential Manager, Mac Keychain, Linux Freedesktop Secret Service
# or KWallet - these will be built into the Linux distribution).
# To use this feature, You can secure the credentials by using the credentials store command in the command line
# Refer to the (URL to Additional Tools)

# (optional) You can encrypt the private key by running `user-sync.exe encrypt'.  
# This will encrypt the private key as RSA 256. you should uncomment 
# priv_key_pass key so that User Sync is knows to decrypt the key.  priv_key_pass should have the plaintext value
# of the password (or, see credential storage above).  The decryption also works for keys encrypted
# externally with OpenSSL or other libraries, provided the format is correct.

enterprise:
  org_id: "Org ID goes here"
  api_key: "API key goes here"
  client_secret: "Client secret goes here"
  tech_acct: "Tech account ID goes here"
  priv_key_path: "private.key"
  #priv_key_pass: "my passphrase for my private key"

  # (optional) As an alternative to priv_key_path, you can place the private key 
  # data directly in this file.  To do this, remove the priv_key_path entry above 
  # and uncomment the following entry.  Replace the sample data with the data 
  # from your private key file (which will be much longer).
  # Note: the Windows credential store can't store data as large as a private
  # key, so Windows users will be prompted to encrypt the private key data instead.
  #priv_key_data: |
  #   -----BEGIN RSA PRIVATE KEY-----
  #   MIIf74jfd84oAgEA6brj4uZ2f1Nkf84j843jfjjJGHYJ8756GHHGGz7jLyZWSscH
  #   CoifurKJY763GHKL98mJGYxWSBvhlWskdjdatagoeshere986fKFUNGd74kdfuEH
  #   -----END RSA PRIVATE KEY-----

